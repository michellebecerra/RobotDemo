/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_face/msg/FaceKeyframeRequest.msg */
#ifndef CORDIAL_FACE_MESSAGE_FACEKEYFRAMEREQUEST_H
#define CORDIAL_FACE_MESSAGE_FACEKEYFRAMEREQUEST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "cordial_face/Keyframe.h"

namespace cordial_face
{
template <class ContainerAllocator>
struct FaceKeyframeRequest_ {
  typedef FaceKeyframeRequest_<ContainerAllocator> Type;

  FaceKeyframeRequest_()
  : face_dofs()
  , times()
  , frames()
  {
  }

  FaceKeyframeRequest_(const ContainerAllocator& _alloc)
  : face_dofs(_alloc)
  , times(_alloc)
  , frames(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _face_dofs_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  face_dofs;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _times_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  times;

  typedef std::vector< ::cordial_face::Keyframe_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cordial_face::Keyframe_<ContainerAllocator> >::other >  _frames_type;
  std::vector< ::cordial_face::Keyframe_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cordial_face::Keyframe_<ContainerAllocator> >::other >  frames;


  typedef boost::shared_ptr< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct FaceKeyframeRequest
typedef  ::cordial_face::FaceKeyframeRequest_<std::allocator<void> > FaceKeyframeRequest;

typedef boost::shared_ptr< ::cordial_face::FaceKeyframeRequest> FaceKeyframeRequestPtr;
typedef boost::shared_ptr< ::cordial_face::FaceKeyframeRequest const> FaceKeyframeRequestConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_face

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "770284344a311c0881d4b0831856af00";
  }

  static const char* value(const  ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x770284344a311c08ULL;
  static const uint64_t static_value2 = 0x81d4b0831856af00ULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_face/FaceKeyframeRequest";
  }

  static const char* value(const  ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Request string of face keyframes\n\
string[] face_dofs\n\
float64[] times\n\
cordial_face/Keyframe[] frames\n\
================================================================================\n\
MSG: cordial_face/Keyframe\n\
float64[] positions\n\
";
  }

  static const char* value(const  ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.face_dofs);
    stream.next(m.times);
    stream.next(m.frames);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct FaceKeyframeRequest_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_face::FaceKeyframeRequest_<ContainerAllocator> & v) 
  {
    s << indent << "face_dofs[]" << std::endl;
    for (size_t i = 0; i < v.face_dofs.size(); ++i)
    {
      s << indent << "  face_dofs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.face_dofs[i]);
    }
    s << indent << "times[]" << std::endl;
    for (size_t i = 0; i < v.times.size(); ++i)
    {
      s << indent << "  times[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.times[i]);
    }
    s << indent << "frames[]" << std::endl;
    for (size_t i = 0; i < v.frames.size(); ++i)
    {
      s << indent << "  frames[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cordial_face::Keyframe_<ContainerAllocator> >::stream(s, indent + "    ", v.frames[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_FACE_MESSAGE_FACEKEYFRAMEREQUEST_H

