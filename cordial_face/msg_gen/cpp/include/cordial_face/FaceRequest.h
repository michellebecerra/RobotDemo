/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_face/msg/FaceRequest.msg */
#ifndef CORDIAL_FACE_MESSAGE_FACEREQUEST_H
#define CORDIAL_FACE_MESSAGE_FACEREQUEST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace cordial_face
{
template <class ContainerAllocator>
struct FaceRequest_ {
  typedef FaceRequest_<ContainerAllocator> Type;

  FaceRequest_()
  : aus()
  , au_degrees()
  , au_ms(0)
  , side(0)
  , visemes()
  , viseme_ms(0)
  , times()
  , start(0)
  , hold_gaze(0)
  , retarget_gaze(false)
  , gaze_target()
  , gaze_vel(0.0)
  {
  }

  FaceRequest_(const ContainerAllocator& _alloc)
  : aus(_alloc)
  , au_degrees(_alloc)
  , au_ms(0)
  , side(0)
  , visemes(_alloc)
  , viseme_ms(0)
  , times(_alloc)
  , start(0)
  , hold_gaze(0)
  , retarget_gaze(false)
  , gaze_target(_alloc)
  , gaze_vel(0.0)
  {
  }

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _aus_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  aus;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _au_degrees_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  au_degrees;

  typedef int64_t _au_ms_type;
  int64_t au_ms;

  typedef int32_t _side_type;
  int32_t side;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _visemes_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  visemes;

  typedef int64_t _viseme_ms_type;
  int64_t viseme_ms;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _times_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  times;

  typedef int64_t _start_type;
  int64_t start;

  typedef int32_t _hold_gaze_type;
  int32_t hold_gaze;

  typedef uint8_t _retarget_gaze_type;
  uint8_t retarget_gaze;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gaze_target_type;
   ::geometry_msgs::Point_<ContainerAllocator>  gaze_target;

  typedef double _gaze_vel_type;
  double gaze_vel;

  enum { BOTH = 0 };
  enum { RIGHT = 1 };
  enum { LEFT = 2 };
  enum { IDLE_OFF = 1 };
  enum { IDLE_ON = 2 };

  typedef boost::shared_ptr< ::cordial_face::FaceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_face::FaceRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct FaceRequest
typedef  ::cordial_face::FaceRequest_<std::allocator<void> > FaceRequest;

typedef boost::shared_ptr< ::cordial_face::FaceRequest> FaceRequestPtr;
typedef boost::shared_ptr< ::cordial_face::FaceRequest const> FaceRequestConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_face::FaceRequest_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_face::FaceRequest_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_face

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_face::FaceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_face::FaceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_face::FaceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0efdbed36edf5411ac89ea3bb0295c90";
  }

  static const char* value(const  ::cordial_face::FaceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0efdbed36edf5411ULL;
  static const uint64_t static_value2 = 0xac89ea3bb0295c90ULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_face::FaceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_face/FaceRequest";
  }

  static const char* value(const  ::cordial_face::FaceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_face::FaceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# request AUs and/or viseme for the face\n\
# multiple AUs possible, but only one viseme\n\
\n\
#the numbers of the action units\n\
int32[] aus\n\
#the degree to which to express the AU, in (0,1]\n\
float64[] au_degrees\n\
#the time to make the expression, in ms\n\
int64 au_ms\n\
\n\
#specify a side of the face to move (eye and eyebrow movements only)\n\
int32 side\n\
int32 BOTH=0\n\
int32 RIGHT=1\n\
int32 LEFT=2\n\
\n\
#the name of the viseme\n\
string[] visemes\n\
#the time to make the viseme, in ms\n\
int64 viseme_ms\n\
#the times (from zero) at which to play the visemes\n\
float32[] times\n\
int64 start\n\
\n\
#toggles idle gaze behavior\n\
int32 hold_gaze\n\
int32 IDLE_OFF=1\n\
int32 IDLE_ON=2\n\
\n\
#3D gaze target, relative to center of face\n\
# if retarget_gaze is false, ignore gaze_target\n\
bool retarget_gaze\n\
geometry_msgs/Point gaze_target\n\
\n\
# velocity to move gaze, in rad/s\n\
float64 gaze_vel\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::cordial_face::FaceRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_face::FaceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.aus);
    stream.next(m.au_degrees);
    stream.next(m.au_ms);
    stream.next(m.side);
    stream.next(m.visemes);
    stream.next(m.viseme_ms);
    stream.next(m.times);
    stream.next(m.start);
    stream.next(m.hold_gaze);
    stream.next(m.retarget_gaze);
    stream.next(m.gaze_target);
    stream.next(m.gaze_vel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct FaceRequest_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_face::FaceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_face::FaceRequest_<ContainerAllocator> & v) 
  {
    s << indent << "aus[]" << std::endl;
    for (size_t i = 0; i < v.aus.size(); ++i)
    {
      s << indent << "  aus[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.aus[i]);
    }
    s << indent << "au_degrees[]" << std::endl;
    for (size_t i = 0; i < v.au_degrees.size(); ++i)
    {
      s << indent << "  au_degrees[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.au_degrees[i]);
    }
    s << indent << "au_ms: ";
    Printer<int64_t>::stream(s, indent + "  ", v.au_ms);
    s << indent << "side: ";
    Printer<int32_t>::stream(s, indent + "  ", v.side);
    s << indent << "visemes[]" << std::endl;
    for (size_t i = 0; i < v.visemes.size(); ++i)
    {
      s << indent << "  visemes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.visemes[i]);
    }
    s << indent << "viseme_ms: ";
    Printer<int64_t>::stream(s, indent + "  ", v.viseme_ms);
    s << indent << "times[]" << std::endl;
    for (size_t i = 0; i < v.times.size(); ++i)
    {
      s << indent << "  times[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.times[i]);
    }
    s << indent << "start: ";
    Printer<int64_t>::stream(s, indent + "  ", v.start);
    s << indent << "hold_gaze: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hold_gaze);
    s << indent << "retarget_gaze: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.retarget_gaze);
    s << indent << "gaze_target: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gaze_target);
    s << indent << "gaze_vel: ";
    Printer<double>::stream(s, indent + "  ", v.gaze_vel);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_FACE_MESSAGE_FACEREQUEST_H

