/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_sound/msg/SoundRequest.msg */
#ifndef CORDIAL_SOUND_MESSAGE_SOUNDREQUEST_H
#define CORDIAL_SOUND_MESSAGE_SOUNDREQUEST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_sound
{
template <class ContainerAllocator>
struct SoundRequest_ {
  typedef SoundRequest_<ContainerAllocator> Type;

  SoundRequest_()
  : sound(0)
  , command(0)
  , arg()
  , arg2()
  {
  }

  SoundRequest_(const ContainerAllocator& _alloc)
  : sound(0)
  , command(0)
  , arg(_alloc)
  , arg2(_alloc)
  {
  }

  typedef int8_t _sound_type;
  int8_t sound;

  typedef int8_t _command_type;
  int8_t command;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arg_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  arg;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arg2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  arg2;

  enum { BACKINGUP = 1 };
  enum { NEEDS_UNPLUGGING = 2 };
  enum { NEEDS_PLUGGING = 3 };
  enum { NEEDS_UNPLUGGING_BADLY = 4 };
  enum { NEEDS_PLUGGING_BADLY = 5 };
  enum { ALL = -1 };
  enum { PLAY_FILE = -2 };
  enum { SAY = -3 };
  enum { PLAY_STOP = 0 };
  enum { PLAY_ONCE = 1 };
  enum { PLAY_START = 2 };
  enum { CHANGE_VOL = 3 };

  typedef boost::shared_ptr< ::cordial_sound::SoundRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_sound::SoundRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SoundRequest
typedef  ::cordial_sound::SoundRequest_<std::allocator<void> > SoundRequest;

typedef boost::shared_ptr< ::cordial_sound::SoundRequest> SoundRequestPtr;
typedef boost::shared_ptr< ::cordial_sound::SoundRequest const> SoundRequestConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_sound::SoundRequest_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_sound::SoundRequest_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_sound

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_sound::SoundRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_sound::SoundRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_sound::SoundRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e3b4b69a05291d4df0d31497c27a5d7f";
  }

  static const char* value(const  ::cordial_sound::SoundRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe3b4b69a05291d4dULL;
  static const uint64_t static_value2 = 0xf0d31497c27a5d7fULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_sound::SoundRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_sound/SoundRequest";
  }

  static const char* value(const  ::cordial_sound::SoundRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_sound::SoundRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# IMPORTANT: You should never have to generate this message yourself.\n\
# Use the sound_play::SoundClient C++ helper or the\n\
# sound_play.libsoundplay.SoundClient Python helper.\n\
\n\
# Sounds\n\
int8 BACKINGUP = 1\n\
int8 NEEDS_UNPLUGGING = 2\n\
int8 NEEDS_PLUGGING = 3\n\
int8 NEEDS_UNPLUGGING_BADLY = 4\n\
int8 NEEDS_PLUGGING_BADLY = 5\n\
\n\
# Sound identifiers that have special meaning\n\
int8 ALL = -1 # Only legal with PLAY_STOP\n\
int8 PLAY_FILE = -2\n\
int8 SAY = -3\n\
\n\
int8 sound # Selects which sound to play (see above)\n\
\n\
# Commands\n\
int8 PLAY_STOP = 0 # Stop this sound from playing\n\
int8 PLAY_ONCE = 1 # Play the sound once\n\
int8 PLAY_START = 2 # Play the sound in a loop until a stop request occurs\n\
int8 CHANGE_VOL = 3 # Change the volume of a playing sound\n\
\n\
int8 command # Indicates what to do with the sound\n\
\n\
string arg # file name or text to say\n\
string arg2 # other arguments\n\
\n\
";
  }

  static const char* value(const  ::cordial_sound::SoundRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_sound::SoundRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sound);
    stream.next(m.command);
    stream.next(m.arg);
    stream.next(m.arg2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SoundRequest_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_sound::SoundRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_sound::SoundRequest_<ContainerAllocator> & v) 
  {
    s << indent << "sound: ";
    Printer<int8_t>::stream(s, indent + "  ", v.sound);
    s << indent << "command: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command);
    s << indent << "arg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arg);
    s << indent << "arg2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arg2);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_SOUND_MESSAGE_SOUNDREQUEST_H

