/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_sprite/msg/KeyframePlayerFeedback.msg */
#ifndef CORDIAL_SPRITE_MESSAGE_KEYFRAMEPLAYERFEEDBACK_H
#define CORDIAL_SPRITE_MESSAGE_KEYFRAMEPLAYERFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_sprite
{
template <class ContainerAllocator>
struct KeyframePlayerFeedback_ {
  typedef KeyframePlayerFeedback_<ContainerAllocator> Type;

  KeyframePlayerFeedback_()
  : pose()
  {
  }

  KeyframePlayerFeedback_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pose_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  pose;


  typedef boost::shared_ptr< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator>  const> ConstPtr;
}; // struct KeyframePlayerFeedback
typedef  ::cordial_sprite::KeyframePlayerFeedback_<std::allocator<void> > KeyframePlayerFeedback;

typedef boost::shared_ptr< ::cordial_sprite::KeyframePlayerFeedback> KeyframePlayerFeedbackPtr;
typedef boost::shared_ptr< ::cordial_sprite::KeyframePlayerFeedback const> KeyframePlayerFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_sprite

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "76249fb45cba333e6a82c7f91cfe1879";
  }

  static const char* value(const  ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x76249fb45cba333eULL;
  static const uint64_t static_value2 = 0x6a82c7f91cfe1879ULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_sprite/KeyframePlayerFeedback";
  }

  static const char* value(const  ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define a feedback message\n\
float64[] pose\n\
\n\
";
  }

  static const char* value(const  ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct KeyframePlayerFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_sprite::KeyframePlayerFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pose[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_SPRITE_MESSAGE_KEYFRAMEPLAYERFEEDBACK_H

