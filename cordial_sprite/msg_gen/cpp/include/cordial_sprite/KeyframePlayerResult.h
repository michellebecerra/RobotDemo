/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_sprite/msg/KeyframePlayerResult.msg */
#ifndef CORDIAL_SPRITE_MESSAGE_KEYFRAMEPLAYERRESULT_H
#define CORDIAL_SPRITE_MESSAGE_KEYFRAMEPLAYERRESULT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_sprite
{
template <class ContainerAllocator>
struct KeyframePlayerResult_ {
  typedef KeyframePlayerResult_<ContainerAllocator> Type;

  KeyframePlayerResult_()
  : final_pose()
  {
  }

  KeyframePlayerResult_(const ContainerAllocator& _alloc)
  : final_pose(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _final_pose_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  final_pose;


  typedef boost::shared_ptr< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator>  const> ConstPtr;
}; // struct KeyframePlayerResult
typedef  ::cordial_sprite::KeyframePlayerResult_<std::allocator<void> > KeyframePlayerResult;

typedef boost::shared_ptr< ::cordial_sprite::KeyframePlayerResult> KeyframePlayerResultPtr;
typedef boost::shared_ptr< ::cordial_sprite::KeyframePlayerResult const> KeyframePlayerResultConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_sprite

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "15b63b7b1b7cfbd8ac973b14f88c5450";
  }

  static const char* value(const  ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x15b63b7b1b7cfbd8ULL;
  static const uint64_t static_value2 = 0xac973b14f88c5450ULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_sprite/KeyframePlayerResult";
  }

  static const char* value(const  ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the result\n\
float64[] final_pose\n\
\n\
";
  }

  static const char* value(const  ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.final_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct KeyframePlayerResult_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_sprite::KeyframePlayerResult_<ContainerAllocator> & v) 
  {
    s << indent << "final_pose[]" << std::endl;
    for (size_t i = 0; i < v.final_pose.size(); ++i)
    {
      s << indent << "  final_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.final_pose[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_SPRITE_MESSAGE_KEYFRAMEPLAYERRESULT_H

