/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_tablet/msg/ChangeToken.msg */
#ifndef CORDIAL_TABLET_MESSAGE_CHANGETOKEN_H
#define CORDIAL_TABLET_MESSAGE_CHANGETOKEN_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_tablet
{
template <class ContainerAllocator>
struct ChangeToken_ {
  typedef ChangeToken_<ContainerAllocator> Type;

  ChangeToken_()
  : id()
  , name()
  , action()
  , img_loc()
  , type()
  , text()
  , textsize(0)
  , x(0)
  , y(0)
  , tint(0)
  , filled(false)
  , bcolor(0)
  , angle(0.0)
  , scalex(0.0)
  , scaley(0.0)
  {
  }

  ChangeToken_(const ContainerAllocator& _alloc)
  : id(_alloc)
  , name(_alloc)
  , action(_alloc)
  , img_loc(_alloc)
  , type(_alloc)
  , text(_alloc)
  , textsize(0)
  , x(0)
  , y(0)
  , tint(0)
  , filled(false)
  , bcolor(0)
  , angle(0.0)
  , scalex(0.0)
  , scaley(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  action;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _img_loc_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  img_loc;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  text;

  typedef int64_t _textsize_type;
  int64_t textsize;

  typedef int64_t _x_type;
  int64_t x;

  typedef int64_t _y_type;
  int64_t y;

  typedef int64_t _tint_type;
  int64_t tint;

  typedef uint8_t _filled_type;
  uint8_t filled;

  typedef int64_t _bcolor_type;
  int64_t bcolor;

  typedef double _angle_type;
  double angle;

  typedef double _scalex_type;
  double scalex;

  typedef double _scaley_type;
  double scaley;


  typedef boost::shared_ptr< ::cordial_tablet::ChangeToken_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_tablet::ChangeToken_<ContainerAllocator>  const> ConstPtr;
}; // struct ChangeToken
typedef  ::cordial_tablet::ChangeToken_<std::allocator<void> > ChangeToken;

typedef boost::shared_ptr< ::cordial_tablet::ChangeToken> ChangeTokenPtr;
typedef boost::shared_ptr< ::cordial_tablet::ChangeToken const> ChangeTokenConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_tablet::ChangeToken_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_tablet::ChangeToken_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_tablet

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::ChangeToken_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::ChangeToken_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_tablet::ChangeToken_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4be41cc23c113455179cd334dd820161";
  }

  static const char* value(const  ::cordial_tablet::ChangeToken_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4be41cc23c113455ULL;
  static const uint64_t static_value2 = 0x179cd334dd820161ULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_tablet::ChangeToken_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/ChangeToken";
  }

  static const char* value(const  ::cordial_tablet::ChangeToken_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_tablet::ChangeToken_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string id\n\
string name\n\
string action\n\
string img_loc\n\
string type\n\
string text\n\
int64 textsize\n\
int64 x\n\
int64 y\n\
int64 tint\n\
bool filled\n\
int64 bcolor\n\
float64 angle\n\
float64 scalex\n\
float64 scaley\n\
";
  }

  static const char* value(const  ::cordial_tablet::ChangeToken_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_tablet::ChangeToken_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.name);
    stream.next(m.action);
    stream.next(m.img_loc);
    stream.next(m.type);
    stream.next(m.text);
    stream.next(m.textsize);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.tint);
    stream.next(m.filled);
    stream.next(m.bcolor);
    stream.next(m.angle);
    stream.next(m.scalex);
    stream.next(m.scaley);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct ChangeToken_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_tablet::ChangeToken_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_tablet::ChangeToken_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "img_loc: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.img_loc);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "textsize: ";
    Printer<int64_t>::stream(s, indent + "  ", v.textsize);
    s << indent << "x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y);
    s << indent << "tint: ";
    Printer<int64_t>::stream(s, indent + "  ", v.tint);
    s << indent << "filled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.filled);
    s << indent << "bcolor: ";
    Printer<int64_t>::stream(s, indent + "  ", v.bcolor);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "scalex: ";
    Printer<double>::stream(s, indent + "  ", v.scalex);
    s << indent << "scaley: ";
    Printer<double>::stream(s, indent + "  ", v.scaley);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_TABLET_MESSAGE_CHANGETOKEN_H

