/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_tablet/msg/TokenPoses.msg */
#ifndef CORDIAL_TABLET_MESSAGE_TOKENPOSES_H
#define CORDIAL_TABLET_MESSAGE_TOKENPOSES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "cordial_tablet/TokenPose.h"

namespace cordial_tablet
{
template <class ContainerAllocator>
struct TokenPoses_ {
  typedef TokenPoses_<ContainerAllocator> Type;

  TokenPoses_()
  : id()
  , poses()
  {
  }

  TokenPoses_(const ContainerAllocator& _alloc)
  : id(_alloc)
  , poses(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;

  typedef std::vector< ::cordial_tablet::TokenPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cordial_tablet::TokenPose_<ContainerAllocator> >::other >  _poses_type;
  std::vector< ::cordial_tablet::TokenPose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cordial_tablet::TokenPose_<ContainerAllocator> >::other >  poses;


  typedef boost::shared_ptr< ::cordial_tablet::TokenPoses_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_tablet::TokenPoses_<ContainerAllocator>  const> ConstPtr;
}; // struct TokenPoses
typedef  ::cordial_tablet::TokenPoses_<std::allocator<void> > TokenPoses;

typedef boost::shared_ptr< ::cordial_tablet::TokenPoses> TokenPosesPtr;
typedef boost::shared_ptr< ::cordial_tablet::TokenPoses const> TokenPosesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_tablet::TokenPoses_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_tablet::TokenPoses_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_tablet

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::TokenPoses_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::TokenPoses_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_tablet::TokenPoses_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c7d71c5ca97bccf8800e375b39cdb2f7";
  }

  static const char* value(const  ::cordial_tablet::TokenPoses_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc7d71c5ca97bccf8ULL;
  static const uint64_t static_value2 = 0x800e375b39cdb2f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_tablet::TokenPoses_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/TokenPoses";
  }

  static const char* value(const  ::cordial_tablet::TokenPoses_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_tablet::TokenPoses_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string id\n\
cordial_tablet/TokenPose[] poses\n\
================================================================================\n\
MSG: cordial_tablet/TokenPose\n\
string instanceid\n\
string tokenid\n\
float64 x\n\
float64 y\n\
";
  }

  static const char* value(const  ::cordial_tablet::TokenPoses_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_tablet::TokenPoses_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.poses);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct TokenPoses_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_tablet::TokenPoses_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_tablet::TokenPoses_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cordial_tablet::TokenPose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_TABLET_MESSAGE_TOKENPOSES_H

