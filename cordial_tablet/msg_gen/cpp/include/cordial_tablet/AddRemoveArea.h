/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_tablet/msg/AddRemoveArea.msg */
#ifndef CORDIAL_TABLET_MESSAGE_ADDREMOVEAREA_H
#define CORDIAL_TABLET_MESSAGE_ADDREMOVEAREA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_tablet
{
template <class ContainerAllocator>
struct AddRemoveArea_ {
  typedef AddRemoveArea_<ContainerAllocator> Type;

  AddRemoveArea_()
  : id()
  , name()
  , text()
  , x(0)
  , y(0)
  , width(0)
  , height(0)
  , drawn(false)
  , filled(false)
  , bcolor(0)
  , arrange()
  , img()
  , textx(0)
  , texty(0)
  , textsize(0)
  , xpadding(0)
  , ypadding(0)
  {
  }

  AddRemoveArea_(const ContainerAllocator& _alloc)
  : id(_alloc)
  , name(_alloc)
  , text(_alloc)
  , x(0)
  , y(0)
  , width(0)
  , height(0)
  , drawn(false)
  , filled(false)
  , bcolor(0)
  , arrange(_alloc)
  , img(_alloc)
  , textx(0)
  , texty(0)
  , textsize(0)
  , xpadding(0)
  , ypadding(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  text;

  typedef int64_t _x_type;
  int64_t x;

  typedef int64_t _y_type;
  int64_t y;

  typedef int64_t _width_type;
  int64_t width;

  typedef int64_t _height_type;
  int64_t height;

  typedef uint8_t _drawn_type;
  uint8_t drawn;

  typedef uint8_t _filled_type;
  uint8_t filled;

  typedef int64_t _bcolor_type;
  int64_t bcolor;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _arrange_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  arrange;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _img_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  img;

  typedef int64_t _textx_type;
  int64_t textx;

  typedef int64_t _texty_type;
  int64_t texty;

  typedef int64_t _textsize_type;
  int64_t textsize;

  typedef int64_t _xpadding_type;
  int64_t xpadding;

  typedef int64_t _ypadding_type;
  int64_t ypadding;


  typedef boost::shared_ptr< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_tablet::AddRemoveArea_<ContainerAllocator>  const> ConstPtr;
}; // struct AddRemoveArea
typedef  ::cordial_tablet::AddRemoveArea_<std::allocator<void> > AddRemoveArea;

typedef boost::shared_ptr< ::cordial_tablet::AddRemoveArea> AddRemoveAreaPtr;
typedef boost::shared_ptr< ::cordial_tablet::AddRemoveArea const> AddRemoveAreaConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_tablet::AddRemoveArea_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_tablet

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::AddRemoveArea_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> > {
  static const char* value() 
  {
    return "708d3cadfedb4d4fc165bc9a4e0d2fcb";
  }

  static const char* value(const  ::cordial_tablet::AddRemoveArea_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x708d3cadfedb4d4fULL;
  static const uint64_t static_value2 = 0xc165bc9a4e0d2fcbULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/AddRemoveArea";
  }

  static const char* value(const  ::cordial_tablet::AddRemoveArea_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string id\n\
string name\n\
string text\n\
int64 x\n\
int64 y\n\
int64 width\n\
int64 height\n\
bool drawn\n\
bool filled\n\
int64 bcolor\n\
string arrange\n\
string img\n\
int64 textx\n\
int64 texty\n\
int64 textsize\n\
int64 xpadding\n\
int64 ypadding\n\
";
  }

  static const char* value(const  ::cordial_tablet::AddRemoveArea_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.name);
    stream.next(m.text);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.drawn);
    stream.next(m.filled);
    stream.next(m.bcolor);
    stream.next(m.arrange);
    stream.next(m.img);
    stream.next(m.textx);
    stream.next(m.texty);
    stream.next(m.textsize);
    stream.next(m.xpadding);
    stream.next(m.ypadding);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct AddRemoveArea_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_tablet::AddRemoveArea_<ContainerAllocator> & v) 
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y);
    s << indent << "width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.height);
    s << indent << "drawn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drawn);
    s << indent << "filled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.filled);
    s << indent << "bcolor: ";
    Printer<int64_t>::stream(s, indent + "  ", v.bcolor);
    s << indent << "arrange: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.arrange);
    s << indent << "img: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.img);
    s << indent << "textx: ";
    Printer<int64_t>::stream(s, indent + "  ", v.textx);
    s << indent << "texty: ";
    Printer<int64_t>::stream(s, indent + "  ", v.texty);
    s << indent << "textsize: ";
    Printer<int64_t>::stream(s, indent + "  ", v.textsize);
    s << indent << "xpadding: ";
    Printer<int64_t>::stream(s, indent + "  ", v.xpadding);
    s << indent << "ypadding: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ypadding);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_TABLET_MESSAGE_ADDREMOVEAREA_H

