/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_tablet/msg/TokenLocation.msg */
#ifndef CORDIAL_TABLET_MESSAGE_TOKENLOCATION_H
#define CORDIAL_TABLET_MESSAGE_TOKENLOCATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_tablet
{
template <class ContainerAllocator>
struct TokenLocation_ {
  typedef TokenLocation_<ContainerAllocator> Type;

  TokenLocation_()
  : instanceid()
  , tokenid()
  , x(0.0)
  , y(0.0)
  , areas()
  {
  }

  TokenLocation_(const ContainerAllocator& _alloc)
  : instanceid(_alloc)
  , tokenid(_alloc)
  , x(0.0)
  , y(0.0)
  , areas(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _instanceid_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  instanceid;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tokenid_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  tokenid;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _areas_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  areas;


  typedef boost::shared_ptr< ::cordial_tablet::TokenLocation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_tablet::TokenLocation_<ContainerAllocator>  const> ConstPtr;
}; // struct TokenLocation
typedef  ::cordial_tablet::TokenLocation_<std::allocator<void> > TokenLocation;

typedef boost::shared_ptr< ::cordial_tablet::TokenLocation> TokenLocationPtr;
typedef boost::shared_ptr< ::cordial_tablet::TokenLocation const> TokenLocationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_tablet::TokenLocation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_tablet::TokenLocation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_tablet

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::TokenLocation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::TokenLocation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_tablet::TokenLocation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "adde96d4c826b3bf23d2d04806e4268d";
  }

  static const char* value(const  ::cordial_tablet::TokenLocation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xadde96d4c826b3bfULL;
  static const uint64_t static_value2 = 0x23d2d04806e4268dULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_tablet::TokenLocation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/TokenLocation";
  }

  static const char* value(const  ::cordial_tablet::TokenLocation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_tablet::TokenLocation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string instanceid\n\
string tokenid\n\
float64 x\n\
float64 y\n\
string[] areas\n\
";
  }

  static const char* value(const  ::cordial_tablet::TokenLocation_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_tablet::TokenLocation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.instanceid);
    stream.next(m.tokenid);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.areas);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct TokenLocation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_tablet::TokenLocation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_tablet::TokenLocation_<ContainerAllocator> & v) 
  {
    s << indent << "instanceid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.instanceid);
    s << indent << "tokenid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tokenid);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "areas[]" << std::endl;
    for (size_t i = 0; i < v.areas.size(); ++i)
    {
      s << indent << "  areas[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.areas[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_TABLET_MESSAGE_TOKENLOCATION_H

