/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_tablet/msg/TokenPose.msg */
#ifndef CORDIAL_TABLET_MESSAGE_TOKENPOSE_H
#define CORDIAL_TABLET_MESSAGE_TOKENPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_tablet
{
template <class ContainerAllocator>
struct TokenPose_ {
  typedef TokenPose_<ContainerAllocator> Type;

  TokenPose_()
  : instanceid()
  , tokenid()
  , x(0.0)
  , y(0.0)
  {
  }

  TokenPose_(const ContainerAllocator& _alloc)
  : instanceid(_alloc)
  , tokenid(_alloc)
  , x(0.0)
  , y(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _instanceid_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  instanceid;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tokenid_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  tokenid;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;


  typedef boost::shared_ptr< ::cordial_tablet::TokenPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_tablet::TokenPose_<ContainerAllocator>  const> ConstPtr;
}; // struct TokenPose
typedef  ::cordial_tablet::TokenPose_<std::allocator<void> > TokenPose;

typedef boost::shared_ptr< ::cordial_tablet::TokenPose> TokenPosePtr;
typedef boost::shared_ptr< ::cordial_tablet::TokenPose const> TokenPoseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_tablet::TokenPose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_tablet::TokenPose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_tablet

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::TokenPose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::TokenPose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_tablet::TokenPose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e813942c94f6206f7a0d20ad04559d0";
  }

  static const char* value(const  ::cordial_tablet::TokenPose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e813942c94f6206ULL;
  static const uint64_t static_value2 = 0xf7a0d20ad04559d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_tablet::TokenPose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/TokenPose";
  }

  static const char* value(const  ::cordial_tablet::TokenPose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_tablet::TokenPose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string instanceid\n\
string tokenid\n\
float64 x\n\
float64 y\n\
";
  }

  static const char* value(const  ::cordial_tablet::TokenPose_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_tablet::TokenPose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.instanceid);
    stream.next(m.tokenid);
    stream.next(m.x);
    stream.next(m.y);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct TokenPose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_tablet::TokenPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_tablet::TokenPose_<ContainerAllocator> & v) 
  {
    s << indent << "instanceid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.instanceid);
    s << indent << "tokenid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tokenid);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_TABLET_MESSAGE_TOKENPOSE_H

