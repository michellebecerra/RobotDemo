# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cordial_tablet/SetupRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetupRequest(genpy.Message):
  _md5sum = "b025a211388cbb172f22010deebdae0c"
  _type = "cordial_tablet/SetupRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 window_w
float64 window_h
string id
"""
  __slots__ = ['window_w','window_h','id']
  _slot_types = ['float64','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       window_w,window_h,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetupRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.window_w is None:
        self.window_w = 0.
      if self.window_h is None:
        self.window_h = 0.
      if self.id is None:
        self.id = ''
    else:
      self.window_w = 0.
      self.window_h = 0.
      self.id = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.window_w, _x.window_h))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.window_w, _x.window_h,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.window_w, _x.window_h))
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.window_w, _x.window_h,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cordial_tablet/SetupResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cordial_tablet.msg

class SetupResponse(genpy.Message):
  _md5sum = "dc09fcf276c0bfcdc619e991721144c4"
  _type = "cordial_tablet/SetupResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """cordial_tablet/ChangeToken[] tokens
cordial_tablet/AddRemoveArea[] areas
string background

================================================================================
MSG: cordial_tablet/ChangeToken
string id
string name
string action
string img_loc
string type
string text
int64 textsize
int64 x
int64 y
int64 tint
bool filled
int64 bcolor
float64 angle
float64 scalex
float64 scaley
================================================================================
MSG: cordial_tablet/AddRemoveArea
string id
string name
string text
int64 x
int64 y
int64 width
int64 height
bool drawn
bool filled
int64 bcolor
string arrange
string img
int64 textx
int64 texty
int64 textsize
int64 xpadding
int64 ypadding"""
  __slots__ = ['tokens','areas','background']
  _slot_types = ['cordial_tablet/ChangeToken[]','cordial_tablet/AddRemoveArea[]','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tokens,areas,background

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetupResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tokens is None:
        self.tokens = []
      if self.areas is None:
        self.areas = []
      if self.background is None:
        self.background = ''
    else:
      self.tokens = []
      self.areas = []
      self.background = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.tokens)
      buff.write(_struct_I.pack(length))
      for val1 in self.tokens:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.action
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.img_loc
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4qBq3d().pack(_x.textsize, _x.x, _x.y, _x.tint, _x.filled, _x.bcolor, _x.angle, _x.scalex, _x.scaley))
      length = len(self.areas)
      buff.write(_struct_I.pack(length))
      for val1 in self.areas:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4q2Bq().pack(_x.x, _x.y, _x.width, _x.height, _x.drawn, _x.filled, _x.bcolor))
        _x = val1.arrange
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.img
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_5q().pack(_x.textx, _x.texty, _x.textsize, _x.xpadding, _x.ypadding))
      _x = self.background
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.tokens is None:
        self.tokens = None
      if self.areas is None:
        self.areas = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tokens = []
      for i in range(0, length):
        val1 = cordial_tablet.msg.ChangeToken()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.action = str[start:end].decode('utf-8')
        else:
          val1.action = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.img_loc = str[start:end].decode('utf-8')
        else:
          val1.img_loc = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8')
        else:
          val1.text = str[start:end]
        _x = val1
        start = end
        end += 65
        (_x.textsize, _x.x, _x.y, _x.tint, _x.filled, _x.bcolor, _x.angle, _x.scalex, _x.scaley,) = _get_struct_4qBq3d().unpack(str[start:end])
        val1.filled = bool(val1.filled)
        self.tokens.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.areas = []
      for i in range(0, length):
        val1 = cordial_tablet.msg.AddRemoveArea()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8')
        else:
          val1.text = str[start:end]
        _x = val1
        start = end
        end += 42
        (_x.x, _x.y, _x.width, _x.height, _x.drawn, _x.filled, _x.bcolor,) = _get_struct_4q2Bq().unpack(str[start:end])
        val1.drawn = bool(val1.drawn)
        val1.filled = bool(val1.filled)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.arrange = str[start:end].decode('utf-8')
        else:
          val1.arrange = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.img = str[start:end].decode('utf-8')
        else:
          val1.img = str[start:end]
        _x = val1
        start = end
        end += 40
        (_x.textx, _x.texty, _x.textsize, _x.xpadding, _x.ypadding,) = _get_struct_5q().unpack(str[start:end])
        self.areas.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.background = str[start:end].decode('utf-8')
      else:
        self.background = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.tokens)
      buff.write(_struct_I.pack(length))
      for val1 in self.tokens:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.action
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.img_loc
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4qBq3d().pack(_x.textsize, _x.x, _x.y, _x.tint, _x.filled, _x.bcolor, _x.angle, _x.scalex, _x.scaley))
      length = len(self.areas)
      buff.write(_struct_I.pack(length))
      for val1 in self.areas:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.text
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_4q2Bq().pack(_x.x, _x.y, _x.width, _x.height, _x.drawn, _x.filled, _x.bcolor))
        _x = val1.arrange
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.img
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_5q().pack(_x.textx, _x.texty, _x.textsize, _x.xpadding, _x.ypadding))
      _x = self.background
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.tokens is None:
        self.tokens = None
      if self.areas is None:
        self.areas = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.tokens = []
      for i in range(0, length):
        val1 = cordial_tablet.msg.ChangeToken()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.action = str[start:end].decode('utf-8')
        else:
          val1.action = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.img_loc = str[start:end].decode('utf-8')
        else:
          val1.img_loc = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.type = str[start:end].decode('utf-8')
        else:
          val1.type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8')
        else:
          val1.text = str[start:end]
        _x = val1
        start = end
        end += 65
        (_x.textsize, _x.x, _x.y, _x.tint, _x.filled, _x.bcolor, _x.angle, _x.scalex, _x.scaley,) = _get_struct_4qBq3d().unpack(str[start:end])
        val1.filled = bool(val1.filled)
        self.tokens.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.areas = []
      for i in range(0, length):
        val1 = cordial_tablet.msg.AddRemoveArea()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.text = str[start:end].decode('utf-8')
        else:
          val1.text = str[start:end]
        _x = val1
        start = end
        end += 42
        (_x.x, _x.y, _x.width, _x.height, _x.drawn, _x.filled, _x.bcolor,) = _get_struct_4q2Bq().unpack(str[start:end])
        val1.drawn = bool(val1.drawn)
        val1.filled = bool(val1.filled)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.arrange = str[start:end].decode('utf-8')
        else:
          val1.arrange = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.img = str[start:end].decode('utf-8')
        else:
          val1.img = str[start:end]
        _x = val1
        start = end
        end += 40
        (_x.textx, _x.texty, _x.textsize, _x.xpadding, _x.ypadding,) = _get_struct_5q().unpack(str[start:end])
        self.areas.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.background = str[start:end].decode('utf-8')
      else:
        self.background = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4qBq3d = None
def _get_struct_4qBq3d():
    global _struct_4qBq3d
    if _struct_4qBq3d is None:
        _struct_4qBq3d = struct.Struct("<4qBq3d")
    return _struct_4qBq3d
_struct_4q2Bq = None
def _get_struct_4q2Bq():
    global _struct_4q2Bq
    if _struct_4q2Bq is None:
        _struct_4q2Bq = struct.Struct("<4q2Bq")
    return _struct_4q2Bq
_struct_5q = None
def _get_struct_5q():
    global _struct_5q
    if _struct_5q is None:
        _struct_5q = struct.Struct("<5q")
    return _struct_5q
class Setup(object):
  _type          = 'cordial_tablet/Setup'
  _md5sum = '66d843b2d280a4400370e68ca5dd5eb8'
  _request_class  = SetupRequest
  _response_class = SetupResponse
