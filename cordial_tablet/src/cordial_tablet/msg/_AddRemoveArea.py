# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cordial_tablet/AddRemoveArea.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AddRemoveArea(genpy.Message):
  _md5sum = "708d3cadfedb4d4fc165bc9a4e0d2fcb"
  _type = "cordial_tablet/AddRemoveArea"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string id
string name
string text
int64 x
int64 y
int64 width
int64 height
bool drawn
bool filled
int64 bcolor
string arrange
string img
int64 textx
int64 texty
int64 textsize
int64 xpadding
int64 ypadding"""
  __slots__ = ['id','name','text','x','y','width','height','drawn','filled','bcolor','arrange','img','textx','texty','textsize','xpadding','ypadding']
  _slot_types = ['string','string','string','int64','int64','int64','int64','bool','bool','int64','string','string','int64','int64','int64','int64','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,name,text,x,y,width,height,drawn,filled,bcolor,arrange,img,textx,texty,textsize,xpadding,ypadding

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AddRemoveArea, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = ''
      if self.name is None:
        self.name = ''
      if self.text is None:
        self.text = ''
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.drawn is None:
        self.drawn = False
      if self.filled is None:
        self.filled = False
      if self.bcolor is None:
        self.bcolor = 0
      if self.arrange is None:
        self.arrange = ''
      if self.img is None:
        self.img = ''
      if self.textx is None:
        self.textx = 0
      if self.texty is None:
        self.texty = 0
      if self.textsize is None:
        self.textsize = 0
      if self.xpadding is None:
        self.xpadding = 0
      if self.ypadding is None:
        self.ypadding = 0
    else:
      self.id = ''
      self.name = ''
      self.text = ''
      self.x = 0
      self.y = 0
      self.width = 0
      self.height = 0
      self.drawn = False
      self.filled = False
      self.bcolor = 0
      self.arrange = ''
      self.img = ''
      self.textx = 0
      self.texty = 0
      self.textsize = 0
      self.xpadding = 0
      self.ypadding = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4q2Bq().pack(_x.x, _x.y, _x.width, _x.height, _x.drawn, _x.filled, _x.bcolor))
      _x = self.arrange
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5q().pack(_x.textx, _x.texty, _x.textsize, _x.xpadding, _x.ypadding))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8')
      else:
        self.text = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.x, _x.y, _x.width, _x.height, _x.drawn, _x.filled, _x.bcolor,) = _get_struct_4q2Bq().unpack(str[start:end])
      self.drawn = bool(self.drawn)
      self.filled = bool(self.filled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.arrange = str[start:end].decode('utf-8')
      else:
        self.arrange = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img = str[start:end].decode('utf-8')
      else:
        self.img = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.textx, _x.texty, _x.textsize, _x.xpadding, _x.ypadding,) = _get_struct_5q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4q2Bq().pack(_x.x, _x.y, _x.width, _x.height, _x.drawn, _x.filled, _x.bcolor))
      _x = self.arrange
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.img
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_5q().pack(_x.textx, _x.texty, _x.textsize, _x.xpadding, _x.ypadding))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text = str[start:end].decode('utf-8')
      else:
        self.text = str[start:end]
      _x = self
      start = end
      end += 42
      (_x.x, _x.y, _x.width, _x.height, _x.drawn, _x.filled, _x.bcolor,) = _get_struct_4q2Bq().unpack(str[start:end])
      self.drawn = bool(self.drawn)
      self.filled = bool(self.filled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.arrange = str[start:end].decode('utf-8')
      else:
        self.arrange = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.img = str[start:end].decode('utf-8')
      else:
        self.img = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.textx, _x.texty, _x.textsize, _x.xpadding, _x.ypadding,) = _get_struct_5q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4q2Bq = None
def _get_struct_4q2Bq():
    global _struct_4q2Bq
    if _struct_4q2Bq is None:
        _struct_4q2Bq = struct.Struct("<4q2Bq")
    return _struct_4q2Bq
_struct_5q = None
def _get_struct_5q():
    global _struct_5q
    if _struct_5q is None:
        _struct_5q = struct.Struct("<5q")
    return _struct_5q
