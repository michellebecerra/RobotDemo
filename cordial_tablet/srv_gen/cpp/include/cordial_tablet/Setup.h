/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_tablet/srv/Setup.srv */
#ifndef CORDIAL_TABLET_SERVICE_SETUP_H
#define CORDIAL_TABLET_SERVICE_SETUP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "cordial_tablet/ChangeToken.h"
#include "cordial_tablet/AddRemoveArea.h"

namespace cordial_tablet
{
template <class ContainerAllocator>
struct SetupRequest_ {
  typedef SetupRequest_<ContainerAllocator> Type;

  SetupRequest_()
  : window_w(0.0)
  , window_h(0.0)
  , id()
  {
  }

  SetupRequest_(const ContainerAllocator& _alloc)
  : window_w(0.0)
  , window_h(0.0)
  , id(_alloc)
  {
  }

  typedef double _window_w_type;
  double window_w;

  typedef double _window_h_type;
  double window_h;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  id;


  typedef boost::shared_ptr< ::cordial_tablet::SetupRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_tablet::SetupRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SetupRequest
typedef  ::cordial_tablet::SetupRequest_<std::allocator<void> > SetupRequest;

typedef boost::shared_ptr< ::cordial_tablet::SetupRequest> SetupRequestPtr;
typedef boost::shared_ptr< ::cordial_tablet::SetupRequest const> SetupRequestConstPtr;



template <class ContainerAllocator>
struct SetupResponse_ {
  typedef SetupResponse_<ContainerAllocator> Type;

  SetupResponse_()
  : tokens()
  , areas()
  , background()
  {
  }

  SetupResponse_(const ContainerAllocator& _alloc)
  : tokens(_alloc)
  , areas(_alloc)
  , background(_alloc)
  {
  }

  typedef std::vector< ::cordial_tablet::ChangeToken_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cordial_tablet::ChangeToken_<ContainerAllocator> >::other >  _tokens_type;
  std::vector< ::cordial_tablet::ChangeToken_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cordial_tablet::ChangeToken_<ContainerAllocator> >::other >  tokens;

  typedef std::vector< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> >::other >  _areas_type;
  std::vector< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cordial_tablet::AddRemoveArea_<ContainerAllocator> >::other >  areas;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _background_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  background;


  typedef boost::shared_ptr< ::cordial_tablet::SetupResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_tablet::SetupResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SetupResponse
typedef  ::cordial_tablet::SetupResponse_<std::allocator<void> > SetupResponse;

typedef boost::shared_ptr< ::cordial_tablet::SetupResponse> SetupResponsePtr;
typedef boost::shared_ptr< ::cordial_tablet::SetupResponse const> SetupResponseConstPtr;


struct Setup
{

typedef SetupRequest Request;
typedef SetupResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Setup
} // namespace cordial_tablet

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::SetupRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::SetupRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_tablet::SetupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b025a211388cbb172f22010deebdae0c";
  }

  static const char* value(const  ::cordial_tablet::SetupRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb025a211388cbb17ULL;
  static const uint64_t static_value2 = 0x2f22010deebdae0cULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_tablet::SetupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/SetupRequest";
  }

  static const char* value(const  ::cordial_tablet::SetupRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_tablet::SetupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 window_w\n\
float64 window_h\n\
string id\n\
\n\
";
  }

  static const char* value(const  ::cordial_tablet::SetupRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::SetupResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_tablet::SetupResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_tablet::SetupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dc09fcf276c0bfcdc619e991721144c4";
  }

  static const char* value(const  ::cordial_tablet::SetupResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdc09fcf276c0bfcdULL;
  static const uint64_t static_value2 = 0xc619e991721144c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_tablet::SetupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/SetupResponse";
  }

  static const char* value(const  ::cordial_tablet::SetupResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_tablet::SetupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/ChangeToken[] tokens\n\
cordial_tablet/AddRemoveArea[] areas\n\
string background\n\
\n\
================================================================================\n\
MSG: cordial_tablet/ChangeToken\n\
string id\n\
string name\n\
string action\n\
string img_loc\n\
string type\n\
string text\n\
int64 textsize\n\
int64 x\n\
int64 y\n\
int64 tint\n\
bool filled\n\
int64 bcolor\n\
float64 angle\n\
float64 scalex\n\
float64 scaley\n\
================================================================================\n\
MSG: cordial_tablet/AddRemoveArea\n\
string id\n\
string name\n\
string text\n\
int64 x\n\
int64 y\n\
int64 width\n\
int64 height\n\
bool drawn\n\
bool filled\n\
int64 bcolor\n\
string arrange\n\
string img\n\
int64 textx\n\
int64 texty\n\
int64 textsize\n\
int64 xpadding\n\
int64 ypadding\n\
";
  }

  static const char* value(const  ::cordial_tablet::SetupResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_tablet::SetupRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.window_w);
    stream.next(m.window_h);
    stream.next(m.id);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SetupRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_tablet::SetupResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tokens);
    stream.next(m.areas);
    stream.next(m.background);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SetupResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cordial_tablet::Setup> {
  static const char* value() 
  {
    return "66d843b2d280a4400370e68ca5dd5eb8";
  }

  static const char* value(const cordial_tablet::Setup&) { return value(); } 
};

template<>
struct DataType<cordial_tablet::Setup> {
  static const char* value() 
  {
    return "cordial_tablet/Setup";
  }

  static const char* value(const cordial_tablet::Setup&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cordial_tablet::SetupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "66d843b2d280a4400370e68ca5dd5eb8";
  }

  static const char* value(const cordial_tablet::SetupRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cordial_tablet::SetupRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/Setup";
  }

  static const char* value(const cordial_tablet::SetupRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cordial_tablet::SetupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "66d843b2d280a4400370e68ca5dd5eb8";
  }

  static const char* value(const cordial_tablet::SetupResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cordial_tablet::SetupResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_tablet/Setup";
  }

  static const char* value(const cordial_tablet::SetupResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORDIAL_TABLET_SERVICE_SETUP_H

