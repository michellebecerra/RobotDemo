/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_core/msg/PlayerGoal.msg */
#ifndef CORDIAL_CORE_MESSAGE_PLAYERGOAL_H
#define CORDIAL_CORE_MESSAGE_PLAYERGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_core
{
template <class ContainerAllocator>
struct PlayerGoal_ {
  typedef PlayerGoal_<ContainerAllocator> Type;

  PlayerGoal_()
  : phrase()
  , interrupt(false)
  {
  }

  PlayerGoal_(const ContainerAllocator& _alloc)
  : phrase(_alloc)
  , interrupt(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _phrase_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  phrase;

  typedef uint8_t _interrupt_type;
  uint8_t interrupt;


  typedef boost::shared_ptr< ::cordial_core::PlayerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_core::PlayerGoal_<ContainerAllocator>  const> ConstPtr;
}; // struct PlayerGoal
typedef  ::cordial_core::PlayerGoal_<std::allocator<void> > PlayerGoal;

typedef boost::shared_ptr< ::cordial_core::PlayerGoal> PlayerGoalPtr;
typedef boost::shared_ptr< ::cordial_core::PlayerGoal const> PlayerGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_core::PlayerGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_core::PlayerGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_core

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_core::PlayerGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_core::PlayerGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_core::PlayerGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a614444f3a34e4fb06e32a5f1567184a";
  }

  static const char* value(const  ::cordial_core::PlayerGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa614444f3a34e4fbULL;
  static const uint64_t static_value2 = 0x06e32a5f1567184aULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_core::PlayerGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_core/PlayerGoal";
  }

  static const char* value(const  ::cordial_core::PlayerGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_core::PlayerGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
string phrase\n\
bool interrupt\n\
\n\
";
  }

  static const char* value(const  ::cordial_core::PlayerGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_core::PlayerGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.phrase);
    stream.next(m.interrupt);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct PlayerGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_core::PlayerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_core::PlayerGoal_<ContainerAllocator> & v) 
  {
    s << indent << "phrase: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.phrase);
    s << indent << "interrupt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interrupt);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_CORE_MESSAGE_PLAYERGOAL_H

