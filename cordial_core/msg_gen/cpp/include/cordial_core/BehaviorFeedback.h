/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_core/msg/BehaviorFeedback.msg */
#ifndef CORDIAL_CORE_MESSAGE_BEHAVIORFEEDBACK_H
#define CORDIAL_CORE_MESSAGE_BEHAVIORFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_core
{
template <class ContainerAllocator>
struct BehaviorFeedback_ {
  typedef BehaviorFeedback_<ContainerAllocator> Type;

  BehaviorFeedback_()
  : status(0)
  {
  }

  BehaviorFeedback_(const ContainerAllocator& _alloc)
  : status(0)
  {
  }

  typedef int32_t _status_type;
  int32_t status;

  enum { WAITING = 1 };
  enum { PLAYING = 2 };

  typedef boost::shared_ptr< ::cordial_core::BehaviorFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_core::BehaviorFeedback_<ContainerAllocator>  const> ConstPtr;
}; // struct BehaviorFeedback
typedef  ::cordial_core::BehaviorFeedback_<std::allocator<void> > BehaviorFeedback;

typedef boost::shared_ptr< ::cordial_core::BehaviorFeedback> BehaviorFeedbackPtr;
typedef boost::shared_ptr< ::cordial_core::BehaviorFeedback const> BehaviorFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_core::BehaviorFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_core::BehaviorFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_core

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_core::BehaviorFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_core::BehaviorFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_core::BehaviorFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8548bf5d6df4f55a51e5849c9a6d4d5d";
  }

  static const char* value(const  ::cordial_core::BehaviorFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8548bf5d6df4f55aULL;
  static const uint64_t static_value2 = 0x51e5849c9a6d4d5dULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_core::BehaviorFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_core/BehaviorFeedback";
  }

  static const char* value(const  ::cordial_core::BehaviorFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_core::BehaviorFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
# the name of the behavior we're waiting on\n\
int32 status\n\
int32 WAITING = 1\n\
int32 PLAYING = 2\n\
\n\
\n\
";
  }

  static const char* value(const  ::cordial_core::BehaviorFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cordial_core::BehaviorFeedback_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_core::BehaviorFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct BehaviorFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_core::BehaviorFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_core::BehaviorFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_CORE_MESSAGE_BEHAVIORFEEDBACK_H

