/* Auto-generated by genmsg_cpp for file /home/michellebecerra/kinetic_ws/sandbox/cordial-public/cordial_core/msg/PlayerFeedback.msg */
#ifndef CORDIAL_CORE_MESSAGE_PLAYERFEEDBACK_H
#define CORDIAL_CORE_MESSAGE_PLAYERFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cordial_core
{
template <class ContainerAllocator>
struct PlayerFeedback_ {
  typedef PlayerFeedback_<ContainerAllocator> Type;

  PlayerFeedback_()
  : behavior()
  {
  }

  PlayerFeedback_(const ContainerAllocator& _alloc)
  : behavior(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _behavior_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  behavior;


  typedef boost::shared_ptr< ::cordial_core::PlayerFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cordial_core::PlayerFeedback_<ContainerAllocator>  const> ConstPtr;
}; // struct PlayerFeedback
typedef  ::cordial_core::PlayerFeedback_<std::allocator<void> > PlayerFeedback;

typedef boost::shared_ptr< ::cordial_core::PlayerFeedback> PlayerFeedbackPtr;
typedef boost::shared_ptr< ::cordial_core::PlayerFeedback const> PlayerFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cordial_core::PlayerFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cordial_core::PlayerFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cordial_core

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cordial_core::PlayerFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cordial_core::PlayerFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cordial_core::PlayerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "03729983c4b9be7a4f2b56846a7ccbdc";
  }

  static const char* value(const  ::cordial_core::PlayerFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x03729983c4b9be7aULL;
  static const uint64_t static_value2 = 0x4f2b56846a7ccbdcULL;
};

template<class ContainerAllocator>
struct DataType< ::cordial_core::PlayerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cordial_core/PlayerFeedback";
  }

  static const char* value(const  ::cordial_core::PlayerFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cordial_core::PlayerFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
string behavior\n\
\n\
\n\
";
  }

  static const char* value(const  ::cordial_core::PlayerFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cordial_core::PlayerFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.behavior);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct PlayerFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cordial_core::PlayerFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cordial_core::PlayerFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "behavior: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.behavior);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORDIAL_CORE_MESSAGE_PLAYERFEEDBACK_H

