# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cordial_core/BehaviorGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class BehaviorGoal(genpy.Message):
  _md5sum = "cc266de8892cd33b779cfc3612c47b8f"
  _type = "cordial_core/BehaviorGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
# name of the behavior
string behavior

# at what time should we be finished moving/holding
# holding only meaningful if blocking or return to prior is true
time end_move
time end_hold

# return to previous pose when behavior is done?
bool return_to_prior

# if the relevant DOFs are in conflict, what to do?
# Queue: play behavior once DOFs are free; end_move and end_hold are taken to be relative to time.now
# Drop: never play the behavior
# Override: cancel the current behavior and play the new one
int32 if_conflict
int32 QUEUE = 0
int32 DROP = 1
int32 OVERRIDE = 2

# some behaviors may take arguments, e.g., a frame for lookat
string[] args

# have robot controller block on this
# if true, then wait_for_result will block until the behavior is done
bool wait_and_block
"""
  # Pseudo-constants
  QUEUE = 0
  DROP = 1
  OVERRIDE = 2

  __slots__ = ['behavior','end_move','end_hold','return_to_prior','if_conflict','args','wait_and_block']
  _slot_types = ['string','time','time','bool','int32','string[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       behavior,end_move,end_hold,return_to_prior,if_conflict,args,wait_and_block

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BehaviorGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.behavior is None:
        self.behavior = ''
      if self.end_move is None:
        self.end_move = genpy.Time()
      if self.end_hold is None:
        self.end_hold = genpy.Time()
      if self.return_to_prior is None:
        self.return_to_prior = False
      if self.if_conflict is None:
        self.if_conflict = 0
      if self.args is None:
        self.args = []
      if self.wait_and_block is None:
        self.wait_and_block = False
    else:
      self.behavior = ''
      self.end_move = genpy.Time()
      self.end_hold = genpy.Time()
      self.return_to_prior = False
      self.if_conflict = 0
      self.args = []
      self.wait_and_block = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.behavior
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4IBi().pack(_x.end_move.secs, _x.end_move.nsecs, _x.end_hold.secs, _x.end_hold.nsecs, _x.return_to_prior, _x.if_conflict))
      length = len(self.args)
      buff.write(_struct_I.pack(length))
      for val1 in self.args:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_get_struct_B().pack(self.wait_and_block))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.end_move is None:
        self.end_move = genpy.Time()
      if self.end_hold is None:
        self.end_hold = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.behavior = str[start:end].decode('utf-8')
      else:
        self.behavior = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.end_move.secs, _x.end_move.nsecs, _x.end_hold.secs, _x.end_hold.nsecs, _x.return_to_prior, _x.if_conflict,) = _get_struct_4IBi().unpack(str[start:end])
      self.return_to_prior = bool(self.return_to_prior)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.args = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.args.append(val1)
      start = end
      end += 1
      (self.wait_and_block,) = _get_struct_B().unpack(str[start:end])
      self.wait_and_block = bool(self.wait_and_block)
      self.end_move.canon()
      self.end_hold.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.behavior
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_4IBi().pack(_x.end_move.secs, _x.end_move.nsecs, _x.end_hold.secs, _x.end_hold.nsecs, _x.return_to_prior, _x.if_conflict))
      length = len(self.args)
      buff.write(_struct_I.pack(length))
      for val1 in self.args:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      buff.write(_get_struct_B().pack(self.wait_and_block))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.end_move is None:
        self.end_move = genpy.Time()
      if self.end_hold is None:
        self.end_hold = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.behavior = str[start:end].decode('utf-8')
      else:
        self.behavior = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.end_move.secs, _x.end_move.nsecs, _x.end_hold.secs, _x.end_hold.nsecs, _x.return_to_prior, _x.if_conflict,) = _get_struct_4IBi().unpack(str[start:end])
      self.return_to_prior = bool(self.return_to_prior)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.args = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.args.append(val1)
      start = end
      end += 1
      (self.wait_and_block,) = _get_struct_B().unpack(str[start:end])
      self.wait_and_block = bool(self.wait_and_block)
      self.end_move.canon()
      self.end_hold.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4IBi = None
def _get_struct_4IBi():
    global _struct_4IBi
    if _struct_4IBi is None:
        _struct_4IBi = struct.Struct("<4IBi")
    return _struct_4IBi
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
